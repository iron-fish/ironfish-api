generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  type        EventType
  occurred_at DateTime  @db.Timestamp(6)
  points      Int
  user_id     Int
  deleted_at  DateTime? @db.Timestamp(6)
  block_id    Int?
  block       Block?    @relation(fields: [block_id], references: [id])
  user        User      @relation(fields: [user_id], references: [id])

  @@unique([block_id], name: "uq_events_on_block_id")
  @@index([block_id], name: "index_events_on_block_id")
  @@index([user_id], name: "index_events_on_user_id")
  @@map("events")
}

model User {
  id                  Int       @id @default(autoincrement())
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  email               String    @db.VarChar
  graffiti            String    @db.VarChar
  total_points        Int       @default(0)
  country_code        String    @db.VarChar
  email_notifications Boolean   @default(false)
  last_login_at       DateTime? @db.Timestamp(6)
  discord             String?   @db.VarChar
  telegram            String?   @db.VarChar
  confirmation_token  String    @db.VarChar
  confirmed_at        DateTime? @db.Timestamp(6)
  events              Event[]

  @@unique([confirmation_token], name: "uq_users_on_confirmation_token")
  @@index([confirmation_token], name: "index_users_on_confirmation_token")
  @@index([email], name: "index_users_on_email")
  @@index([graffiti], name: "index_users_on_graffiti")
  @@map("users")
}

model Block {
  id                  Int                @id @default(autoincrement())
  created_at          DateTime           @default(now()) @db.Timestamp(6)
  updated_at          DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  hash                String             @db.VarChar
  sequence            Int
  previous_block_hash String?            @db.VarChar
  difficulty          Int
  main                Boolean
  network_version     Int
  transactions_count  Int
  timestamp           DateTime           @db.Timestamp(6)
  graffiti            String             @db.VarChar
  searchable_text     String             @db.VarChar
  size                Int?
  event               Event?
  blocks_transactions BlockTransaction[]

  @@unique([hash, network_version], name: "uq_blocks_on_hash_and_network_version")
  @@index([hash], name: "index_blocks_on_hash")
  @@index([hash, network_version], name: "index_blocks_on_hash_and_network_version")
  @@index([sequence, network_version], name: "index_blocks_on_sequence_and_network_version")
  @@index([searchable_text], name: "index_blocks_on_searchable_text")
  @@map("blocks")
}

model Transaction {
  id                  Int                @id @default(autoincrement())
  created_at          DateTime           @default(now()) @db.Timestamp(6)
  updated_at          DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  hash                String             @db.VarChar
  network_version     Int
  fee                 Int
  size                Int
  notes               Json
  spends              Json
  blocks_transactions BlockTransaction[]

  @@unique([hash, network_version], name: "uq_transactions_on_hash_and_network_version")
  @@index([hash], name: "index_transactions_on_hash")
  @@index([hash, network_version], name: "index_transactions_on_hash_and_network_version")
  @@map("transactions")
}

model BlockTransaction {
  block          Block       @relation(fields: [block_id], references: [id])
  block_id       Int
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  transaction_id Int

  @@id([block_id, transaction_id])
  @@index([block_id], name: "index_blocks_transactions_on_block_id")
  @@index([transaction_id], name: "index_blocks_transactions_on_transaction_id")
  @@map("blocks_transactions")
}

enum EventType {
  BLOCK_MINED
  BUG_CAUGHT
  COMMUNITY_CONTRIBUTION
  PULL_REQUEST_MERGED
  SOCIAL_MEDIA_PROMOTION

  @@map("event_type")
}
