generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Block {
  id                       Int                @id @default(autoincrement())
  created_at               DateTime           @default(now()) @db.Timestamp(6)
  updated_at               DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  hash                     String             @db.VarChar
  sequence                 Int
  previous_block_hash      String             @db.VarChar
  main                     Boolean
  network_version          Int
  transactions_count       Int
  timestamp                DateTime           @db.Timestamp(6)
  graffiti                 String             @db.VarChar
  size                     Int?
  difficulty               Decimal?
  time_since_last_block_ms Int?
  work                     Decimal?
  blocks_transactions      BlockTransaction[]

  @@unique([hash, network_version], name: "uq_blocks_on_hash_and_network_version", map: "uq_blocks_on_hash_and_network_version")
  @@index([hash], map: "index_blocks_on_hash")
  @@index([hash, network_version], map: "index_blocks_on_hash_and_network_version")
  @@index([sequence, network_version], map: "index_blocks_on_sequence_and_network_version")
  @@map("blocks")
}

model Transaction {
  id                  Int                @id @default(autoincrement())
  created_at          DateTime           @default(now()) @db.Timestamp(6)
  updated_at          DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  hash                String             @db.VarChar
  fee                 Float
  expiration          Int?
  seen_sequence       Int?
  size                Int
  notes               Json
  spends              Json
  network_version     Int
  serialized          String?            @db.VarChar
  asset_descriptions  AssetDescription[]
  created_assets      Asset[]
  blocks_transactions BlockTransaction[]

  @@unique([hash, network_version], name: "uq_transactions_on_hash_and_network_version", map: "uq_transactions_on_hash_and_network_version")
  @@index([hash], map: "index_transactions_on_hash")
  @@index([hash, network_version], map: "index_transactions_on_hash_and_network_version")
  @@map("transactions")
}

model BlockTransaction {
  block_id       Int
  transaction_id Int
  index          Int?
  block          Block       @relation(fields: [block_id], references: [id])
  transaction    Transaction @relation(fields: [transaction_id], references: [id])

  @@id([block_id, transaction_id])
  @@index([block_id], map: "index_blocks_transactions_on_block_id")
  @@index([transaction_id], map: "index_blocks_transactions_on_transaction_id")
  @@map("blocks_transactions")
}

model FaucetTransaction {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  email        String?   @db.VarChar
  public_key   String    @db.VarChar
  started_at   DateTime? @db.Timestamp(6)
  completed_at DateTime? @db.Timestamp(6)
  tries        Int       @default(0)
  hash         String?   @db.VarChar

  @@index([email], map: "index_faucet_transactions_on_email")
  @@index([public_key], map: "index_faucet_transactions_on_public_key")
  @@index([hash], map: "index_faucet_transactions_on_hash")
  @@index([completed_at], map: "index_faucet_transactions_on_completed_at")
  @@index([started_at, completed_at], map: "index_faucet_transactions_on_completed_at_and_started_at")
  @@map("faucet_transactions")
}

model BlockDaily {
  id                         Int      @id @default(autoincrement())
  created_at                 DateTime @default(now()) @db.Timestamp(6)
  updated_at                 DateTime @default(now()) @updatedAt @db.Timestamp(6)
  date                       DateTime @unique(map: "uq_blocks_daily_on_date") @db.Timestamp(6)
  average_block_time_ms      Int
  blocks_count               Int
  blocks_with_graffiti_count Int
  cumulative_unique_graffiti Int
  transactions_count         Int
  chain_sequence             Int
  unique_graffiti_count      Int
  average_difficulty         Decimal
  average_block_size         Decimal  @default(0)

  @@index([date], map: "index_blocks_daily_on_date")
  @@map("blocks_daily")
}

model Version {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  version    String   @db.VarChar

  @@map("versions")
}

model Asset {
  id                     Int                @id @default(autoincrement())
  created_at             DateTime           @default(now()) @db.Timestamp(6)
  updated_at             DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  created_transaction_id Int
  identifier             String             @unique(map: "uq_assets_on_identifier")
  metadata               String
  name                   String
  owner                  String
  supply                 BigInt
  verified_at            DateTime?          @db.Timestamp(6)
  descriptions           AssetDescription[]
  created_transaction    Transaction        @relation(fields: [created_transaction_id], references: [id])

  @@index([created_transaction_id], map: "index_assets_on_created_transaction_id")
  @@map("assets")
}

model AssetDescription {
  id             Int                  @id @default(autoincrement())
  created_at     DateTime             @default(now()) @db.Timestamp(6)
  updated_at     DateTime             @default(now()) @updatedAt @db.Timestamp(6)
  type           AssetDescriptionType
  value          BigInt
  asset_id       Int
  transaction_id Int
  asset          Asset                @relation(fields: [asset_id], references: [id])
  transaction    Transaction          @relation(fields: [transaction_id], references: [id])

  @@index([asset_id], map: "index_asset_descriptions_on_asset_id")
  @@index([transaction_id], map: "index_asset_descriptions_on_transaction_id")
  @@map("asset_descriptions")
}

enum AssetDescriptionType {
  BURN
  MINT

  @@map("asset_description_type")
}
